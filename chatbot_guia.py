# chatbot_guia.py
import os
from dotenv import load_dotenv
import google.generativeai as genai
import traceback # Para imprimir o traceback completo do erro, se necess√°rio
from flask import Flask, request, jsonify, render_template

# --- Carregar vari√°veis de ambiente do arquivo .env ---
load_dotenv()

# --- Configura√ß√£o Inicial do Flask ---
app = Flask(__name__)

# --- Persona e Conte√∫do do Chatbot ---
NOME_CHATBOT = "Z√© do Financeiro"

# --- Configura√ß√£o da API Key do Gemini ---
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
MODELO_GEMINI = None # Inicializa como None

if not GOOGLE_API_KEY:
    print(f"[{NOME_CHATBOT}] ALERTA: Chave da API do Google (GOOGLE_API_KEY) n√£o encontrada no arquivo .env! {NOME_CHATBOT} vai operar em modo limitado, sem acesso ao Gemini.")
else:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        print(f"[{NOME_CHATBOT}] API Key do Gemini configurada com sucesso!")
        MODELO_GEMINI = genai.GenerativeModel('gemini-1.5-flash') # Ou 'gemini-pro'
        print(f"[{NOME_CHATBOT}] Modelo Gemini '{MODELO_GEMINI.model_name}' carregado e pronto pra desenrolar!")
    except Exception as e:
        print(f"[{NOME_CHATBOT}] Oxe! Deu um erro ao configurar o Gemini ou carregar o modelo: {e}")
        print(f"[{NOME_CHATBOT}] Detalhes do erro: {traceback.format_exc()}")
        print(f"[{NOME_CHATBOT}] Verifique sua API Key, conex√£o com a internet e se o modelo est√° dispon√≠vel.")
        GOOGLE_API_KEY = None 
        MODELO_GEMINI = None


def saudacao_inicial():
    return f"Chegue mais, meu patr√£o/minha patroa! Sou o {NOME_CHATBOT}, seu parceiro aqui de Alagoas pra gente desenrolar as finan√ßas do seu neg√≥cio. Pode perguntar o significado de termos financeiros, sobre Pix e Maquininha, dicas de 'Caixa Forte', ou pedir a 'lista de termos' que eu j√° aprendi!"

glossario_local_do_ze = {
    "mei": f"A√≠ sim, patr√£o/patroa! MEI √© o Microempreendedor Individual. √â tipo um atalho pra voc√™ que trampa por conta pr√≥pria ter seu CNPJ, emitir nota, essas paradas todas... Sou o {NOME_CHATBOT} e t√¥ aqui pra ajudar!",
    "cnpj": f"CNPJ, meu consagrado(a), √© o Cadastro Nacional da Pessoa Jur√≠dica. √â tipo o CPF, s√≥ que pra sua empresa...",
    "conta pj": f"Conta PJ √© uma conta no banco feita especialmente pra sua empresa, separada da sua conta pessoal...",
    "pix": f"O Pix (quando n√£o estamos falando da compara√ß√£o com maquininha) √© aquele jeito ligeiro e quase sempre de gra√ßa pra gente pequena mandar e receber dinheiro. Cai na hora!",
    "qr code": f"QR Code (no contexto geral, n√£o apenas de Pix) √© tipo um c√≥digo de barras moderninho, um quadradinho cheio de quadradinhos menores...",
    "fluxo de caixa": f"Fluxo de caixa (o termo geral, viu? Temos um m√≥dulo s√≥ pra dicas de como fazer o seu!) √© o controle de toda grana que entra e sai do seu neg√≥cio...", # Ajustado para n√£o confundir com o m√≥dulo
    "capital de giro": f"Capital de giro √© aquela reserva esperta que voc√™ precisa ter pra manter o neg√≥cio funcionando no dia a dia...",
    "microcr√©dito": f"Microcr√©dito √© um tipo de empr√©stimo com valor mais baixo, pensado pra ajudar o pequeno empreendedor..."
}

def explicar_termo_com_gemini(termo_usuario):
    if not GOOGLE_API_KEY or not MODELO_GEMINI:
        print(f"[{NOME_CHATBOT}] Tentativa de usar Gemini para '{termo_usuario}', mas n√£o est√° configurado/dispon√≠vel.")
        return f"Oxe, meu sistema de consulta avan√ßada (Gemini) n√£o t√° configurado ou deu chabu na inicializa√ß√£o. {NOME_CHATBOT} n√£o conseguiu procurar por '{termo_usuario}' agora."

    prompt = f"""
Voc√™ √© o {NOME_CHATBOT}, um assistente financeiro digital super gente boa, com um forte sotaque e carisma de Alagoas, Macei√≥.
Sua miss√£o √© explicar termos financeiros de forma SIMPLES, CURTA, AMIG√ÅVEL e DIRETA para microempreendedores e trabalhadores aut√¥nomos.
Use uma linguagem popular e express√µes regionais de Alagoas (como 'meu rei', 'minha rainha', 'visse?', 'arretado', 'desenrolar', 'aperreio', 'mangar', 'deixe de pantim', 'catita', 'buli√ßoso').
Explique o seguinte termo: '{termo_usuario}'

Mantenha a explica√ß√£o em no m√°ximo 3 ou 4 frases curtas.
Seja positivo e encorajador.
Evite formalidades e termos muito t√©cnicos na explica√ß√£o.
Se o termo for muito complexo, n√£o parecer financeiro, ou se voc√™ n√£o tiver certeza da resposta, pode dizer que esse o {NOME_CHATBOT} ainda n√£o aprendeu direito ou que precisa estudar mais um cadinho, mas sempre de um jeito engra√ßado e alagoano. N√£o invente informa√ß√µes se n√£o tiver certeza.
"""
    try:
        print(f"[{NOME_CHATBOT}] Enviando o termo '{termo_usuario}' para o Gemini...")
        generation_config = genai.types.GenerationConfig(temperature=0.7)
        response = MODELO_GEMINI.generate_content(prompt, generation_config=generation_config)
        print(f"[{NOME_CHATBOT}] Resposta recebida do Gemini para '{termo_usuario}'.")

        text_result = None
        if hasattr(response, 'text') and response.text and isinstance(response.text, str):
            text_result = response.text
        elif hasattr(response, 'parts') and response.parts:
            all_parts_text = "".join(part.text for part in response.parts if hasattr(part, 'text') and isinstance(part.text, str))
            if all_parts_text: text_result = all_parts_text
        elif hasattr(response, 'candidates') and response.candidates and \
             hasattr(response.candidates[0], 'content') and hasattr(response.candidates[0].content, 'parts') and \
             response.candidates[0].content.parts:
            all_parts_text_candidates = "".join(part.text for part in response.candidates[0].content.parts if hasattr(part, 'text') and isinstance(part.text, str))
            if all_parts_text_candidates: text_result = all_parts_text_candidates
        
        if text_result and text_result.strip():
            final_explanation = text_result.strip()
            print(f"[{NOME_CHATBOT}] Explica√ß√£o do Gemini para '{termo_usuario}': {final_explanation}")
            return final_explanation
        else:
            block_reason_msg = ""
            if hasattr(response, 'prompt_feedback') and response.prompt_feedback and \
               hasattr(response.prompt_feedback, 'block_reason') and response.prompt_feedback.block_reason:
                block_reason = response.prompt_feedback.block_reason
                block_reason_msg = f"Motivo do bloqueio: {block_reason}."
                print(f"[{NOME_CHATBOT}] A solicita√ß√£o para '{termo_usuario}' foi bloqueada pelo Gemini. {block_reason_msg}")
                if hasattr(response, 'candidates') and response.candidates and hasattr(response.candidates[0], 'safety_ratings'):
                    safety_info = f" (Safety Ratings: {response.candidates[0].safety_ratings})"
                    block_reason_msg += safety_info
                return f"Oxe, meu patr√£o/minha patroa! O sistema avan√ßado n√£o quis falar sobre '{termo_usuario}'. {block_reason_msg} Vamos tentar outro?"
            
            print(f"[{NOME_CHATBOT}] Resposta do Gemini para '{termo_usuario}' veio vazia ou em formato n√£o reconhecido. {block_reason_msg} Resposta completa: {vars(response) if hasattr(response, '__dict__') else response}")
            return f"Eita gota! O {NOME_CHATBOT} tentou desenrolar sobre '{termo_usuario}' com o sistema avan√ßado, mas a resposta veio meio... em branco ou esquisita. {block_reason_msg} Parece que nem ele pegou a ideia dessa vez. Que tal outro termo?"
    except Exception as e:
        print(f"[{NOME_CHATBOT}] Deu um erro arretado ao tentar falar com o Gemini sobre '{termo_usuario}': {e}\n{traceback.format_exc()}")
        return f"Rapaz, deu um piripaque daqueles na minha conex√£o com o sistema avan√ßado pra explicar '{termo_usuario}'. A antena deve ter ca√≠do! Tenta de novo daqui a pouquinho. (Detalhe do erro: {type(e).__name__})"

def modulo_pix_maquininha(mensagem_usuario_original):
    print(f"[{NOME_CHATBOT}] Entrou no m√≥dulo Pix ou Maquininha.")
    resposta_base = f"""
Opa, meu patr√£o/minha patroa! Chegou na d√∫vida cruel: Pix ou Maquininha? Relaxe que o {NOME_CHATBOT} te d√° o papo reto pra voc√™ n√£o entrar em nenhuma roubada! üí∏

**PIX: O Ligeirinho Querido** üöÄ
O Pix √© aquele parceiro que chegou pra facilitar a vida, visse?
* **Grana na Hora:** Vendeu, recebeu! O dinheiro cai na sua conta rapidinho, sem choro nem vela.
* **Custo Baixo (ou Zero!):** Pra gente que √© MEI ou pequeno neg√≥cio, muitas vezes n√£o tem taxa nenhuma pra receber via Pix. √â economia na certa!
* **Facinho de Usar:** Com Chave Pix (CPF/CNPJ, celular, e-mail) ou QR Code, seu cliente te paga num instante.

**MAQUININHA: A Boa e Velha Companheira** üí≥
A maquininha ainda tem seu valor!
* **Mais Op√ß√µes pro Cliente:** Aceita cart√£o de d√©bito, cr√©dito e at√© parcelado.
* **Vendas Parceladas:** Quer vender aquele produto mais caro? Com a maquininha, o cliente pode parcelar.

**E AS TAXAS DA MAQUININHA, Z√â?** üò•
Fique de olho! A maquininha tem:
* **Custo da M√°quina:** Compra ou aluguel.
* **Taxa por Venda (MDR):** Um percentual sobre cada venda. Varia MUITO!
* **Prazo pra Receber:** O dinheiro do cr√©dito pode demorar. Antecipar tem taxa.

**{NOME_CHATBOT} AJUDA A DECIDIR:** ü§î
1.  **Sua Clientela:** Preferem Pix ou cart√£o?
2.  **Volume de Vendas:** Muitas vendas com valor alto? Taxas da maquininha podem pesar.
3.  **Compare Custos:** Pesquise taxas de maquininhas e compare com o Pix.
4.  **Use os Dois!** Muitas vezes, ter Pix (barato) e maquininha (op√ß√µes) √© o ideal.

Ficou mais claro? Se tiver d√∫vida espec√≠fica, tipo sobre taxas ou como gerar QR Code, manda que o {NOME_CHATBOT} e o Gemini tentam te ajudar!
"""
    return resposta_base

# No seu arquivo chatbot_guia.py, substitua a fun√ß√£o modulo_caixa_forte por esta:

def modulo_caixa_forte(mensagem_usuario_original):
    print(f"[{NOME_CHATBOT}] Entrou no m√≥dulo Caixa Forte, Neg√≥cio Forte. Mensagem: '{mensagem_usuario_original}'")
    mensagem_lower = mensagem_usuario_original.lower().strip()

    # Gatilhos gen√©ricos que indicam um pedido pela informa√ß√£o base do m√≥dulo
    gatilhos_base = [
        "caixa forte", "controle financeiro", "organizar finan√ßas", 
        "gest√£o financeira", "sa√∫de financeira", "dicas de caixa"
    ]

    # Verifica se a mensagem do usu√°rio √© muito similar a um gatilho base (indicando que ele quer a info geral)
    # ou se √© uma pergunta mais espec√≠fica.
    # Se a mensagem for EXATAMENTE um dos gatilhos base, ou muito curta e um gatilho, mostra info base.
    eh_pedido_base = False
    for gatilho in gatilhos_base:
        if mensagem_lower == gatilho:
            eh_pedido_base = True
            break
    
    # Se n√£o for um pedido base exato, mas ainda cont√©m um gatilho, pode ser uma pergunta espec√≠fica.
    # Vamos considerar uma pergunta espec√≠fica se ela for mais longa que os gatilhos simples.
    if not eh_pedido_base and any(gatilho in mensagem_lower for gatilho in gatilhos_base) and len(mensagem_lower.split()) > 3:
        # √â uma pergunta espec√≠fica dentro do tema Caixa Forte, vamos usar o Gemini
        print(f"[{NOME_CHATBOT}] 'Caixa Forte': Recebida pergunta espec√≠fica: '{mensagem_usuario_original}'. Usando Gemini.")
        
        if not GOOGLE_API_KEY or not MODELO_GEMINI:
            return f"Oxe, meu sistema avan√ßado t√° cochilando agora. Mas sobre '{mensagem_usuario_original}', lembre das dicas b√°sicas de separar as contas e anotar tudo, visse?"

        prompt_gemini = f"""
Voc√™ √© o {NOME_CHATBOT}, um consultor financeiro gente boa de Alagoas, Macei√≥.
Um microempreendedor j√° conhece as dicas gerais sobre 'Caixa Forte e Neg√≥cio Forte' e agora tem uma pergunta mais espec√≠fica sobre controle financeiro.
A pergunta do empreendedor √©: '{mensagem_usuario_original}'

Sua tarefa √© responder a esta pergunta espec√≠fica de forma clara, simples, pr√°tica e curta (no m√°ximo 4-5 frases).
Mantenha seu sotaque e express√µes regionais de Alagoas (como 'meu rei', 'minha rainha', 'visse?', 'arretado', 'desenrolar', 'aperreio').
Seja positivo, encorajador e direto ao ponto. Se a pergunta for muito complexa para uma resposta curta ou fora do seu alcance de conhecimento pr√°tico para um MEI, diga que vai precisar estudar mais um cadinho ou sugira simplificar a pergunta, sempre no seu estilo.
N√£o invente dados espec√≠ficos de bancos ou taxas, fale de forma geral e pr√°tica.
Por exemplo, se perguntarem sobre 'como fazer planilha', d√™ passos simples ou sugira colunas b√°sicas.
"""
        try:
            print(f"[{NOME_CHATBOT}] 'Caixa Forte': Enviando pergunta espec√≠fica para o Gemini: '{mensagem_usuario_original}'")
            generation_config = genai.types.GenerationConfig(temperature=0.7)
            response = MODELO_GEMINI.generate_content(prompt_gemini, generation_config=generation_config)
            
            text_result = None
            # ... (l√≥gica de extra√ß√£o de texto da resposta do Gemini, igual √† da fun√ß√£o explicar_termo_com_gemini)
            if hasattr(response, 'text') and response.text and isinstance(response.text, str):
                text_result = response.text
            elif hasattr(response, 'parts') and response.parts:
                all_parts_text = "".join(part.text for part in response.parts if hasattr(part, 'text') and isinstance(part.text, str))
                if all_parts_text: text_result = all_parts_text
            elif hasattr(response, 'candidates') and response.candidates and \
                 hasattr(response.candidates[0], 'content') and hasattr(response.candidates[0].content, 'parts') and \
                 response.candidates[0].content.parts:
                all_parts_text_candidates = "".join(part.text for part in response.candidates[0].content.parts if hasattr(part, 'text') and isinstance(part.text, str))
                if all_parts_text_candidates: text_result = all_parts_text_candidates
            
            if text_result and text_result.strip():
                resposta_especifica = text_result.strip()
                print(f"[{NOME_CHATBOT}] 'Caixa Forte': Resposta do Gemini para pergunta espec√≠fica: {resposta_especifica}")
                return resposta_especifica
            else:
                # ... (l√≥gica de tratamento de bloqueio ou resposta vazia, igual √† da fun√ß√£o explicar_termo_com_gemini)
                block_reason_msg = ""
                if hasattr(response, 'prompt_feedback') and response.prompt_feedback and hasattr(response.prompt_feedback, 'block_reason') and response.prompt_feedback.block_reason:
                    block_reason = response.prompt_feedback.block_reason
                    block_reason_msg = f"Motivo do bloqueio: {block_reason}."
                print(f"[{NOME_CHATBOT}] 'Caixa Forte': Resposta do Gemini para pergunta espec√≠fica veio vazia ou em formato n√£o reconhecido. {block_reason_msg}")
                return f"Eita, meu camarada! Tentei buscar uma luz sobre '{mensagem_usuario_original}', mas o sistema avan√ßado hoje t√° meio nublado. Que tal tentar perguntar de um jeito mais simples ou focar num ponto por vez?"
        except Exception as e:
            print(f"[{NOME_CHATBOT}] 'Caixa Forte': Erro ao chamar Gemini para pergunta espec√≠fica: {e}\n{traceback.format_exc()}")
            return f"Rapaz, deu um piripaque aqui tentando responder sobre '{mensagem_usuario_original}'. Minhas antenas pro sistema avan√ßado devem estar precisando de um ajuste! Tenta de novo daqui a pouco."
        
    # Se n√£o for uma pergunta espec√≠fica (ou seja, √© um pedido base), retorna o texto padr√£o.
    print(f"[{NOME_CHATBOT}] 'Caixa Forte': Respondendo com informa√ß√µes base.")
    resposta_base = f"""
E a√≠, meu patr√£o/minha patroa! Quer deixar o caixa da sua empresa forte como um touro e o neg√≥cio rendendo que √© uma beleza? Ent√£o voc√™ t√° falando com o {NOME_CHATBOT} certo! Bora organizar as finan√ßas pra n√£o ter mais aperreio e o dimdim sobrar no fim do m√™s! üí∞üí™

**1. {NOME_CHATBOT} Pergunta: Cad√™ o Dinheiro da Empresa e Cad√™ o Seu?**
Primeira li√ß√£o, e a mais importante de todas, visse? **SEPARE as contas!** O dinheiro que entra das suas vendas √© da EMPRESA. O seu sal√°rio (o famoso pr√≥-labore) voc√™ tira da empresa e bota na sua conta PESSOAL. Misturar tudo √© receita pra dor de cabe√ßa! Uma conta PJ ajuda demais nisso.

**2. Anota Tudo, Freguesia por Freguesia, Despesa por Despesa!**
Tem que anotar TUDO que entra e TUDO que sai. Isso √© o famoso **Fluxo de Caixa**.
* **Entradas (Receitas):** Dinheiro das vendas, servi√ßos.
* **Sa√≠das (Despesas/Custos):** Aluguel, fornecedor, seu pr√≥-labore. Tem as **despesas fixas** (todo m√™s) e as **vari√°veis** (mudam com as vendas).

**3. Ferramentas pra te Ajudar nessa Miss√£o:**
* **App do seu Banco:** Muitos j√° ajudam a categorizar gastos.
* **Planilha Financeira:** No Excel ou Google Sheets. Colunas: Data, Descri√ß√£o, Entrada (R$), Sa√≠da (R$), Saldo (R$).
* **Aplicativos de Controle Financeiro:** Existem v√°rios, alguns de gra√ßa.

**4. Pra que Serve esse Tal de Caixa Forte, Z√©?**
Com as contas organizadas, voc√™ consegue:
* Saber pra onde o dinheiro t√° indo.
* Ver se o pre√ßo do seu produto/servi√ßo t√° dando lucro.
* Planejar melhor e n√£o entrar em d√≠vida √† toa.
* Dormir mais tranquilo!

E a√≠, deu pra clarear? Se tiver alguma pergunta mais espec√≠fica sobre como fazer uma planilha, exemplos de custos, ou outras dicas de controle financeiro, pode mandar a bronca que o {NOME_CHATBOT} se vira nos trinta pra te ajudar!
"""
    return resposta_base

#Alerta Vermelho AntiGolpe

def modulo_alerta_antigolpe(mensagem_usuario_original):
    print(f"[{NOME_CHATBOT}] Entrou no m√≥dulo Alerta Vermelho AntiGolpe.")
    mensagem_lower = mensagem_usuario_original.lower().strip()

    # CONTE√öDO BASE DO M√ìDULO
    resposta_base = f"""
Opa, meu patr√£o/minha patroa! Fique esperto que nem suricato no deserto, porque no mundo digital tem muito malandro querendo passar a perna na gente boa! Mas relaxa, que o {NOME_CHATBOT} vai te dar o bizu pra voc√™ n√£o cair em cilada e manter seu suado dinheirinho seguro. Bora aprender a farejar golpe de longe? üïµÔ∏è‚Äç‚ôÇÔ∏èüö´

**Principais Golpes que Rondam o Empreendedor:**
* **Boleto Adulterado:** Sempre confira o nome do benefici√°rio, o CNPJ, o valor e o banco antes de pagar. Se o c√≥digo de barras estiver esquisito ou falhado, desconfie!
* **Mensagem Falsa (Phishing):** SMS, e-mail ou zap com link suspeito pedindo seus dados, senha, ou dizendo que voc√™ ganhou um pr√™mio incr√≠vel? CORRA QUE √â CILADA, BINO! Banco e empresa s√©ria n√£o pedem senha assim.
* **Zap Clonado ou Perfil Falso:** "Amigo" ou "parente" pedindo dinheiro com urg√™ncia? Ligue pra pessoa (chamada de voz, n√£o zap!) pra confirmar antes de fazer qualquer Pix.
* **Cr√©dito F√°cil que Pede Dep√≥sito Adiantado:** Promessa de empr√©stimo r√°pido sem consulta, mas tem que pagar uma "taxinha" antes? Golpe na certa! Institui√ß√£o s√©ria n√£o cobra pra liberar empr√©stimo.
* **Golpe do PIX Agendado ou Comprovante Falso:** Vendeu algo? S√≥ entregue o produto depois que o dinheiro CAIR MESMO na sua conta. Comprovante pode ser forjado!

**Dicas de Ouro do {NOME_CHATBOT} pra se Proteger:**
1.  **Desconfie Sempre:** Se a oferta √© boa demais pra ser verdade, provavelmente √© mentira.
2.  **N√£o Clique em Tudo:** Link estranho no e-mail, SMS ou zap? Melhor n√£o clicar. V√° direto no site oficial da empresa ou do banco.
3.  **Senha √© Segredo:** Sua senha √© que nem escova de dente, n√£o se empresta pra ningu√©m! Use senhas fortes e diferentes para cada servi√ßo.
4.  **Autentica√ß√£o de Dois Fatores (2FA):** Ative isso em tudo que der (banco, redes sociais, e-mail). √â uma camada extra de seguran√ßa arretada!
5.  **Na D√∫vida, N√ÉO FA√áA!** Se sentir que tem algo esquisito, pare, respire e pe√ßa ajuda ou verifique com a empresa/banco por um canal que VOC√ä conhece e confia.

Quer que o {NOME_CHATBOT} te conte um 'causo' de golpe pra voc√™ ver como os malandros agem, ou tem alguma d√∫vida espec√≠fica sobre algum tipo de trambique? Manda a√≠ que a gente tenta te deixar mais safo!
"""

    # L√≥gica para intera√ß√µes mais espec√≠ficas com Gemini
    # Exemplo: se o usu√°rio pedir um "causo" ou perguntar sobre um golpe espec√≠fico.
    # Esta parte ser√° um pouco mais elaborada.
    
    # Cen√°rio simples: se o usu√°rio pedir um exemplo de golpe.
    gatilhos_cenario_golpe = ["me conte um causo", "exemplo de golpe", "simula√ß√£o de golpe", "como agem os golpistas"]
    if any(gatilho in mensagem_lower for gatilho in gatilhos_cenario_golpe):
        print(f"[{NOME_CHATBOT}] 'Alerta AntiGolpe': Usu√°rio pediu um cen√°rio de golpe. Usando Gemini.")
        if not GOOGLE_API_KEY or not MODELO_GEMINI:
            return f"Oxe, meu sistema avan√ßado que cria os 'causos' de golpe t√° tirando uma soneca. Mas a dica principal √©: sempre desconfie e verifique tudo direitinho antes de clicar ou pagar!"

        prompt_gemini_cenario = f"""
Voc√™ √© o {NOME_CHATBOT}, um consultor financeiro gente boa de Alagoas.
Um microempreendedor pediu um exemplo de um golpe comum para ficar mais esperto.
Descreva um cen√°rio curto e simples de um golpe digital comum que afeta pequenos comerciantes (ex: golpe do boleto falso, phishing por whatsapp, falso empr√©stimo).
Use sua persona alagoana, linguagem popular, e explique rapidamente qual o 'pulo do gato' do golpista e qual o 'alerta vermelho' para o empreendedor.
Mantenha o cen√°rio curto, em 3 a 5 frases.
"""
        try:
            print(f"[{NOME_CHATBOT}] 'Alerta AntiGolpe': Enviando pedido de cen√°rio para o Gemini...")
            generation_config = genai.types.GenerationConfig(temperature=0.8) # Um pouco mais de criatividade para cen√°rios
            response = MODELO_GEMINI.generate_content(prompt_gemini_cenario, generation_config=generation_config)
            
            text_result = None
            # (Reutilizar a mesma l√≥gica de extra√ß√£o de texto da resposta do Gemini das outras fun√ß√µes)
            if hasattr(response, 'text') and response.text and isinstance(response.text, str): text_result = response.text
            elif hasattr(response, 'parts') and response.parts: text_result = "".join(part.text for part in response.parts if hasattr(part, 'text') and isinstance(part.text, str))
            elif hasattr(response, 'candidates') and response.candidates and hasattr(response.candidates[0], 'content') and hasattr(response.candidates[0].content, 'parts') and response.candidates[0].content.parts: text_result = "".join(part.text for part in response.candidates[0].content.parts if hasattr(part, 'text') and isinstance(part.text, str))
            
            if text_result and text_result.strip():
                cenario_golpe = text_result.strip()
                print(f"[{NOME_CHATBOT}] 'Alerta AntiGolpe': Cen√°rio de golpe gerado pelo Gemini: {cenario_golpe}")
                return f"{resposta_base}\n\n**O {NOME_CHATBOT} te conta um causo pra ficar ligado:**\n{cenario_golpe}\n\nLembre-se: informa√ß√£o e desconfian√ßa s√£o suas melhores armas!"
            else: # Tratamento de bloqueio ou resposta vazia
                block_reason_msg = ""
                if hasattr(response, 'prompt_feedback') and response.prompt_feedback and hasattr(response.prompt_feedback, 'block_reason') and response.prompt_feedback.block_reason:
                    block_reason_msg = f"Motivo do bloqueio: {response.prompt_feedback.block_reason}."
                print(f"[{NOME_CHATBOT}] 'Alerta AntiGolpe': Resposta do Gemini para cen√°rio veio vazia ou em formato n√£o reconhecido. {block_reason_msg}")
                return f"{resposta_base}\n\nOxe! Ia te contar um causo, mas meu repert√≥rio deu um branco aqui. Mas fica a dica: todo cuidado √© pouco!"
        except Exception as e:
            print(f"[{NOME_CHATBOT}] 'Alerta AntiGolpe': Erro ao chamar Gemini para gerar cen√°rio: {e}\n{traceback.format_exc()}")
            return f"{resposta_base}\n\nRapaz, minha mem√≥ria pra causo de golpe falhou agora. Mas a regra √© clara: desconfie sempre!"
    
    # Se n√£o for um pedido de cen√°rio, retorna a informa√ß√£o base.
    return resposta_base

def listar_termos_conhecidos():
    if not glossario_local_do_ze:
        return f"Oxe, ainda t√¥ aprendendo os termos, {NOME_CHATBOT} aqui t√° come√ßando! Volte mais tarde."
    mensagem = f"Opa! O {NOME_CHATBOT} aqui j√° tem na ponta da l√≠ngua um bocado de coisa, visse? Se liga nos termos que eu posso te explicar do meu caderninho:\n"
    for termo in glossario_local_do_ze.keys():
        mensagem += f"- {termo.capitalize()}\n"
    mensagem += f"\nE pode perguntar sobre 'Pix ou Maquininha' e dicas de 'Caixa Forte' tamb√©m! Se jogar um termo diferente, eu dou meus pulos com meu sistema avan√ßado pra tentar te ajudar!"
    return mensagem

def pesquisar_termo_glossario(mensagem_usuario):
    mensagem_normalizada = mensagem_usuario.lower().strip()
    print(f"[{NOME_CHATBOT}] Pesquisando termo para (gloss√°rio): '{mensagem_normalizada}'")
    
    termo_encontrado_localmente = None
    termo_candidato_local = ""

    for termo_chave in glossario_local_do_ze.keys():
        if f" {termo_chave} " in f" {mensagem_normalizada} " or mensagem_normalizada == termo_chave:
            termo_encontrado_localmente = glossario_local_do_ze[termo_chave]
            termo_candidato_local = termo_chave
            break 
    
    if termo_encontrado_localmente:
        print(f"[{NOME_CHATBOT}] Termo '{termo_candidato_local}' encontrado no gloss√°rio local.")
        return termo_encontrado_localmente
    
    palavras_lista = ["lista de termos", "quais termos", "termos que voc√™ conhece", "listar termos"]
    if any(gatilho in mensagem_normalizada for gatilho in palavras_lista):
        print(f"[{NOME_CHATBOT}] Usu√°rio pediu a lista de termos.")
        return listar_termos_conhecidos()

    termo_para_gemini = ""
    palavras_chave_extracao = [
        "o que √©", "o que significa", "explique sobre", "explique", "defini√ß√£o de", 
        "significado de", "fale sobre", "me fala sobre", "saber sobre", "sobre"
    ]

    for palavra_chave in palavras_chave_extracao:
        if mensagem_normalizada.startswith(palavra_chave + " "):
            termo_extraido = mensagem_normalizada.split(palavra_chave + " ", 1)[1].strip()
            for pontuacao in ["?", ".", "!"]:
                if termo_extraido.endswith(pontuacao): termo_extraido = termo_extraido[:-1].strip()
            if termo_extraido:
                termo_para_gemini = termo_extraido
                print(f"[{NOME_CHATBOT}] Termo extra√≠do para Gemini (ap√≥s palavra-chave '{palavra_chave}'): '{termo_para_gemini}'")
                break 
    
    if not termo_para_gemini and len(mensagem_normalizada.split()) <= 3:
        palavras_curtas_ignoraveis = ["oi", "ok", "sim", "n√£o", "valeu", "obrigado", "blz", "tchau", "teste", "pix", "qr code", "maquininha", "caixa"] # Evita re-processar gatilhos de outros m√≥dulos
        if mensagem_normalizada not in palavras_curtas_ignoraveis and not any(saud in mensagem_normalizada for saud in ["bom dia", "boa tarde", "boa noite"]):
             termo_para_gemini = mensagem_normalizada
             print(f"[{NOME_CHATBOT}] Mensagem curta '{termo_para_gemini}' assumida como termo para Gemini (gloss√°rio).")

    if termo_para_gemini:
        if len(termo_para_gemini.split()) > 7: # Limite arbitr√°rio para um "termo"
            print(f"[{NOME_CHATBOT}] Termo extra√≠do '{termo_para_gemini}' (gloss√°rio) √© muito longo. Respondendo com mensagem padr√£o.")
            return f"Oxe, {NOME_CHATBOT} acha que '{termo_para_gemini}' √© mais uma frase do que um termo pra explicar. Tenta algo mais direto!"
        
        print(f"[{NOME_CHATBOT}] Termo '{termo_para_gemini}' n√£o encontrado localmente (gloss√°rio). Tentando com Gemini...")
        return explicar_termo_com_gemini(termo_para_gemini)
    else:
        print(f"[{NOME_CHATBOT}] N√£o foi poss√≠vel extrair um termo para o gloss√°rio da mensagem: '{mensagem_usuario}'. Respondendo com mensagem padr√£o.")
        return f"Oxe, {NOME_CHATBOT} n√£o entendeu bem o que voc√™ quis dizer com '{mensagem_usuario}'. Tente perguntar 'o que √© [termo]?', sobre 'Pix ou Maquininha', dicas de 'Caixa Forte', ou pe√ßa a 'lista de termos'."

# --- L√≥gica Principal do Chatbot (Roteamento) ---

def processar_mensagem_usuario(mensagem_usuario):
    mensagem_lower = mensagem_usuario.lower().strip()
    print(f"[{NOME_CHATBOT}] MENSAGEM RECEBIDA (roteador principal): '{mensagem_usuario}' (normalizada: '{mensagem_lower}')")

    if not mensagem_lower:
        return f"Manda a prosa, meu patr√£o/minha patroa! {NOME_CHATBOT} t√° aqui todo ouvidos!"

    # 1. Verificar Sauda√ß√µes
    saudacoes = ["oi", "ol√°", "e a√≠", "iai", "opa", "salve", "bom dia", "boa tarde", "boa noite"]
    if mensagem_lower in saudacoes or any(mensagem_lower.startswith(s) and len(mensagem_lower.split()) <=3 for s in saudacoes) :
        print(f"[{NOME_CHATBOT}] Roteador: Mensagem reconhecida como sauda√ß√£o.")
        return saudacao_inicial()

    # 2. Verificar M√≥dulo "Pix ou Maquininha"
    gatilhos_pix_maquininha = [
        "pix ou maquininha", "pix e maquininha", "maquininha ou pix", "maquininha e pix",
        "qual o melhor pix ou cart√£o", "pix ou cart√£o", "taxa pix", "taxa maquininha",
        "sobre pix", "sobre maquininha", "fale sobre pix", "fale sobre maquininha",
        "qr code", "maquininha de cartao", "maquininha de cart√£o", "pix vs maquininha",
        "vantagens do pix", "desvantagens da maquininha", "custo maquininha"
    ]
    if any(gatilho in mensagem_lower for gatilho in gatilhos_pix_maquininha):
        print(f"[{NOME_CHATBOT}] Roteador: Mensagem acionou o m√≥dulo Pix ou Maquininha.")
        return modulo_pix_maquininha(mensagem_usuario)

    # 3. Verificar M√≥dulo "Caixa Forte, Neg√≥cio Forte"
    gatilhos_caixa_forte = [
        "caixa forte", "controle financeiro", "fluxo de caixa", "organizar finan√ßas",
        "separar contas", "despesas da empresa", "custos do neg√≥cio", "planilha financeira",
        "gest√£o financeira", "sa√∫de financeira", "dicas de caixa"
    ]
    if any(gatilho in mensagem_lower for gatilho in gatilhos_caixa_forte):
        print(f"[{NOME_CHATBOT}] Roteador: Mensagem acionou o m√≥dulo Caixa Forte.")
        return modulo_caixa_forte(mensagem_usuario)

    # 4. Verificar M√≥dulo "Alerta Vermelho AntiGolpe" (NOVO)
    gatilhos_antigolpe = [
        "alerta golpe", "anti golpe", "golpe pix", "golpe boleto", "evitar golpe", 
        "seguran√ßa online", "phishing", "golpe do zap", "golpe whatsapp", "me proteger de golpe",
        "dica de seguran√ßa", "√© golpe", "como saber se √© golpe", "me conte um causo", "exemplo de golpe" # Adicionando gatilhos para cen√°rio
    ]
    if any(gatilho in mensagem_lower for gatilho in gatilhos_antigolpe):
        print(f"[{NOME_CHATBOT}] Roteador: Mensagem acionou o m√≥dulo Alerta AntiGolpe.")
        return modulo_alerta_antigolpe(mensagem_usuario)

    # 5. Se n√£o for nenhum dos anteriores, tenta o Gloss√°rio (que pode usar Gemini)
    print(f"[{NOME_CHATBOT}] Roteador: Mensagem n√£o √© sauda√ß√£o nem m√≥dulo espec√≠fico, encaminhando para pesquisa de termo/gloss√°rio...")
    return pesquisar_termo_glossario(mensagem_usuario)

@app.route('/') # Rota para a p√°gina principal do chat
def home():
    print(f"[{NOME_CHATBOT}] Servindo a p√°gina principal do chat (index.html).")
    return render_template('index.html') # Renderiza e retorna o arquivo index.html da pasta 'templates'

# --- Endpoint para receber mensagens (simulando o WhatsApp) ---
@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    resposta_bot = f"Oxe! Alguma coisa deu muito errado aqui no {NOME_CHATBOT} e ele n√£o soube o que dizer."
    mensagem_recebida_para_log = ""
    
    try:
        if request.method == 'POST':
            dados_recebidos = request.json
            mensagem_usuario = dados_recebidos.get('mensagem', '').strip()
            mensagem_recebida_para_log = mensagem_usuario
            print(f"[{NOME_CHATBOT}] Requisi√ß√£o POST recebida. Mensagem: '{mensagem_usuario}'")
            
            if not mensagem_usuario:
                resposta_bot = f'Manda a mensagem a√≠! {NOME_CHATBOT} t√° no aguardo.'
            else:
                resposta_bot = processar_mensagem_usuario(mensagem_usuario)
        
        elif request.method == 'GET':
            mensagem_teste = request.args.get('mensagem', '').strip()
            mensagem_recebida_para_log = mensagem_teste
            print(f"[{NOME_CHATBOT}] Requisi√ß√£o GET recebida. Mensagem: '{mensagem_teste}'")

            if not mensagem_teste:
                print(f"[{NOME_CHATBOT}] Mensagem GET vazia, respondendo com sauda√ß√£o.")
                resposta_bot = saudacao_inicial()
            else:
                resposta_bot = processar_mensagem_usuario(mensagem_teste)
        
        print(f"[{NOME_CHATBOT}] Resposta para '{mensagem_recebida_para_log}': '{resposta_bot[:100]}...'")
        return jsonify({'resposta_bot': resposta_bot})

    except Exception as e:
        print(f"[{NOME_CHATBOT}] ERRO GRAVE no endpoint para mensagem '{mensagem_recebida_para_log}': {e}\n{traceback.format_exc()}")
        resposta_bot = f"Eita gota! {NOME_CHATBOT} teve um piripaque feio processando sua mensagem. Tente de novo ou avise o t√©cnico!"
        return jsonify({'resposta_bot': resposta_bot})

# --- Para rodar o aplicativo Flask localmente ---
if __name__ == '__main__':
    print(f"[{NOME_CHATBOT}] Iniciando o servidor Flask...")
    if not GOOGLE_API_KEY or not MODELO_GEMINI:
        print(f"[{NOME_CHATBOT}] ALERTA: {NOME_CHATBOT} vai operar em MODO LIMITADO pois a API do Gemini n√£o est√° completamente configurada.")
    
    app.run(debug=True, host='0.0.0.0', port=5000)